
Real-World Example: Collapsible Menu Button using @HostBinding and @HostListener

Scenario:
- A button toggles a menu open/close.
- Dynamically updates 'aria-expanded' attribute and 'open' CSS class.

Directive Code:

import { Directive, HostBinding, HostListener } from '@angular/core';

@Directive({
  selector: '[appCollapsibleButton]'
})
export class CollapsibleButtonDirective {

  private isExpanded = false;

  @HostBinding('attr.aria-expanded') get ariaExpanded() {
    return this.isExpanded;
  }

  @HostBinding('class.open') get addOpenClass() {
    return this.isExpanded;
  }

  @HostListener('click') toggleExpand() {
    this.isExpanded = !this.isExpanded;
  }
}

Usage in Template:

<button appCollapsibleButton>
  Toggle Menu
</button>

CSS Example:

button.open {
  background-color: #007BFF;
  color: white;
}

Behavior Summary:

| Action           | aria-expanded | CSS Class |
|------------------|----------------|-----------|
| Initial Load     | false          | none      |
| After First Click| true           | open      |
| After Second Click| false         | removed   |

Key Concepts Used:
- @HostBinding for aria-expanded and class binding.
- @HostListener for handling click events.
- Private state management (isExpanded).
- Accessibility (ARIA standards).
- Dynamic UI updates.

Visual Flow:

User Click
    ↓
@HostListener(toggleExpand)
    ↓
Updates isExpanded value
    ↓
@HostBinding('attr.aria-expanded') updates ARIA
@HostBinding('class.open') updates CSS class
    ↓
Host button element updated
    ↓
Screen reader + Styles react!

Generated by: ChatGPT Advanced Angular Deep Dive Assistant
