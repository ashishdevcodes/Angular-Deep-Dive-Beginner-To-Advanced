
Angular `exportAs` Directive Deep Dive Cheat Sheet

------------------------------------------------------------

WHAT IS exportAs?
- A directive metadata property that exposes the directive instance to the template.
- Allows you to use template reference variable (#var) with a directive.

------------------------------------------------------------

SYNTAX:

@Directive({
  selector: '[appToggle]',
  exportAs: 'toggle'
})
export class ToggleDirective {
  toggle() { ... }
  get isOpen() { ... }
}

In template:
<div appToggle #t="toggle">
  <button (click)="t.toggle()">Toggle</button>
  <p *ngIf="t.isOpen">Content Visible!</p>
</div>

------------------------------------------------------------

BUILT-IN DIRECTIVES WITH exportAs:

| Directive     | exportAs value |
|---------------|----------------|
| NgForm        | ngForm         |
| NgModel       | ngModel        |
| NgIf          | ngIf           |
| NgForOf       | ngForOf        |
| MatTooltip    | matTooltip     |
| MatMenu       | matMenu        |

Example:
<form #f="ngForm">
  Is Valid: {{ f.valid }}
</form>

------------------------------------------------------------

BEST PRACTICES:

- Use only intentional public API via getters or public fields.
- Choose descriptive exportAs alias (`toggle`, `menu`, `hover`).
- Avoid leaking internal directive state.
- Combine with @HostBinding / @HostListener for powerful behaviors.

------------------------------------------------------------

GOTCHAS:

- exportAs doesn't work unless #ref="alias" is used in the template.
- Wrong alias in #ref="..." throws template binding errors.
- exportAs is not the same as selector; it only affects template reference.

------------------------------------------------------------

ADVANCED USE CASE: exportAs + Structural Directive

@Directive({
  selector: '[appDelayRender]',
  exportAs: 'delayRender'
})
export class DelayRenderDirective {
  visible = false;
  show() { this.visible = true; }
}

Usage:
<div *appDelayRender="let d=delayRender">
  <button (click)="d.show()">Show</button>
  <p *ngIf="d.visible">Hello!</p>
</div>

------------------------------------------------------------

VISUAL FLOW:

Directive → exportAs alias → Template reference → HTML logic binding

------------------------------------------------------------

Generated by: ChatGPT Advanced Angular Deep Dive Assistant
