
Angular Structural Directives - Deep Dive Guide

------------------------------------------------------------

1. WHAT ARE STRUCTURAL DIRECTIVES?
- Change the DOM structure by adding/removing elements.
- Use * prefix, e.g., *ngIf, *ngFor.
- Rewrites element as <ng-template> with directive logic.

------------------------------------------------------------

2. BUILT-IN STRUCTURAL DIRECTIVES

| Directive    | Purpose                                |
|--------------|-----------------------------------------|
| *ngIf        | Conditionally renders element           |
| *ngFor       | Iterates over collections               |
| *ngSwitch    | Switch-case style conditional rendering |

------------------------------------------------------------

3. ANATOMY

| Concept        | Purpose                                           |
|----------------|---------------------------------------------------|
| TemplateRef    | Represents the DOM fragment to be conditionally rendered |
| ViewContainerRef | Anchor location in the DOM to add/remove views |

------------------------------------------------------------

4. CUSTOM STRUCTURAL DIRECTIVE: *appIfNot

Directive Code:

@Directive({
  selector: '[appIfNot]'
})
export class IfNotDirective {
  constructor(
    private templateRef: TemplateRef<any>,
    private viewContainer: ViewContainerRef
  ) {}

  @Input() set appIfNot(condition: boolean) {
    if (!condition) {
      this.viewContainer.createEmbeddedView(this.templateRef);
    } else {
      this.viewContainer.clear();
    }
  }
}

Usage:

<p *appIfNot="isLoggedIn">
  You are not logged in!
</p>

------------------------------------------------------------

5. REAL-WORLD EXAMPLE: *appHasPermission

@Directive({
  selector: '[appHasPermission]'
})
export class HasPermissionDirective {
  @Input() set appHasPermission(required: string) {
    const userPermissions = ['read', 'write']; // Ideally from service
    if (userPermissions.includes(required)) {
      this.viewContainer.createEmbeddedView(this.templateRef);
    } else {
      this.viewContainer.clear();
    }
  }

  constructor(
    private templateRef: TemplateRef<any>,
    private viewContainer: ViewContainerRef
  ) {}
}

Usage:

<button *appHasPermission="'delete'">Delete</button>

------------------------------------------------------------

6. GOTCHAS

| Issue                        | Description                        |
|-----------------------------|------------------------------------|
| Not calling clear()          | Causes duplicate elements          |
| Not using set accessor       | Input changes won’t reflect        |
| Not declared in module       | Angular throws unknown directive error |
| View context issues          | Complex logic should be in service |

------------------------------------------------------------

7. BEST PRACTICES

- Always clear view before re-inserting.
- Abstract permission/context logic in services.
- Use TemplateRef context with $implicit when needed.
- Prefer readable names for structural directives.

------------------------------------------------------------

STRUCTURAL DIRECTIVE FLOW:

Template (*appIfNot)
  ↓
Compiler converts to <ng-template>
  ↓
Directive receives TemplateRef + ViewContainerRef
  ↓
Based on condition:
  - viewContainer.createEmbeddedView(templateRef)
  - OR viewContainer.clear()

------------------------------------------------------------

Generated by: ChatGPT Advanced Angular Deep Dive Assistant
