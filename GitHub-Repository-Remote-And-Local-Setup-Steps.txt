
GitHub Repository Remote and Local Setup Steps

1. Initialize a Git Repository
   - Create a new repository locally:
     git init

   - Create a remote repository on GitHub:
     - Go to https://github.com → "New Repository".
     - Name the repository, leave it empty (no README), and copy the URL.

   - Link the local repository to the remote repository:
     git remote add origin <repository-url>

2. Configure Git Settings
   - Set the global Git configuration (only required once per machine):
     git config --global user.name "Your Name"
     git config --global user.email "your-email@example.com"

   - Verify the configuration:
     git config --global --list

3. Generate a Personal Access Token (PAT)
   - Go to GitHub Settings → Developer Settings → Personal Access Tokens → Generate New Token.
   - Select scopes (e.g., "repo" for private/public repos).
   - Copy the generated token and use it in place of your GitHub password when pushing changes.

4. Add .gitignore
   - Create a .gitignore file to exclude unnecessary files (e.g., node_modules, .angular, etc.).
   - Example:
     # Ignore node_modules across all projects
     **/node_modules
     **/dist
     **/.angular
     **/.vscode
     .DS_Store

     # Include all new folders
     !*/

   - Stage and commit .gitignore:
     git add .gitignore
     git commit -m "Added .gitignore to exclude unnecessary files"

5. Add and Push Files
   - Verify untracked files:
     git status

   - Add specific folders/files or everything:
     git add <folder-name>
     git add .

   - Commit the changes:
     git commit -m "Initial commit"

   - Push the changes to the remote repository:
     git push origin main

6. Resolving Issues
   - Issue 1: Password Authentication Failed
     - Reason: Password authentication for HTTPS was removed in 2021.
     - Solution: Use a Personal Access Token (PAT) instead of a password when prompted for credentials.

   - Issue 2: Files in .gitignore Still Staged
     - Reason: Files were already tracked before adding .gitignore.
     - Solution:
       git rm -r --cached <file-or-folder>
       git commit -m "Removed <file-or-folder> from tracking"
       git add .
       git commit -m "Re-added files respecting .gitignore"

   - Issue 3: Nested .git Directories
     - Reason: Nested repositories conflict with the parent repository.
     - Solution:
       rm -rf <nested-folder>/.git
       git add <folder>
       git commit -m "Added folder without nested repository"

   - Issue 4: Previously Ignored Files Now Staging
     - Reason: .gitignore rules applied after files were already created.
     - Solution:
       git rm -r --cached .
       git add .
       git commit -m "Cleaned up untracked files based on .gitignore"

7. Testing Workflow with New Projects
   - Create a new folder and verify tracking:
     mkdir Section4-Test_Project
     echo "Test content" > Section4-Test_Project/test.txt
     git status

   - If the folder appears as untracked, add, commit, and push:
     git add Section4-Test_Project
     git commit -m "Added Section4-Test_Project"
     git push origin main

8. Confirming Success
   - After each push, verify the updates on your GitHub repository to ensure all changes are reflected.
